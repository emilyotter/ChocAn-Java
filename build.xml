<!-- FILEPATH: /home/olympos/Desktop/Class/CS200/team12/build.xml -->
<!--Author : Nischal Bhattarai, Maddox Guthire, Egan Trant-->
<project xmlns:ivy="antlib:org.apache.ivy.ant" 
       name="Project4" default="main" basedir=".">
	<description>
		Create a Java Project (JAR) with Ant build script
	</description>

	<property name="projectName" value="ChocAn" />
	<property name="src.dir" location="src" />
	<property name="build.dir" location="build" />
	<property name="dist.dir" location="release" />
	<property name="dist.lib.dir" location="${dist.dir}/lib" />
	<property name="lib.dir" value="lib" />
	<property name="main-class" value="Terminal" />
	<property name="javadoc.dir" value="doc" />

	<!-- ivy start -->
	<!-- ivy to get dependencies and copy to project lib folder automatically -->
	<target name="resolve" description="retrieve dependencies with ivy">
		<ivy:retrieve />
	</target>

	<!-- install ivy -->
	<target name="ivy" description="Install ivy">
		<mkdir dir="${user.home}/.ant/lib" />
		<get dest="${user.home}/.ant/lib/ivy.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0-rc1/ivy-2.4.0-rc1.jar" />
	</target>
	<!-- ivy end -->

	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>


	<!-- external libraries classpath, we don't need sources and javadoc -->
	<path id="classpath">
		<fileset dir="${basedir}/">
			<include name="${lib.dir}/*.jar" />
			<exclude name="${lib.dir}/*sources.jar"/>
			<exclude name="${lib.dir}/*javadoc.jar"/>
		</fileset>
	</path>

	<!-- To work with external libraries, need classpath to compile -->
	<target name="compile" depends="init" description="compile the source ">
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" />
	</target>

	<!-- constructs the external libraries classpath name -->
	<pathconvert property="classpath.name" pathsep=" ">
		<path refid="classpath" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.jar" to="${lib.dir}/*.jar" />
			</chainedmapper>
		</mapper>
	</pathconvert>

	<target name="copy-dependencies">
		<copy todir="${dist.lib.dir}">
			<fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
		</copy>
	</target>

	<!-- jar it, and declares the ext libraries in manifest.mf file -->
	<target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">

		<echo message="classpath.name : ${classpath.name} " />

		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
				<attribute name="Class-Path" value="${classpath.name}" />
			</manifest>
		</jar>
	</target>

	<!--Test Target-->
    <target name="test" depends="compile">
        <mkdir dir="${build.dir}/test" />
        <javac srcdir="${src.dir}" destdir="${build.dir}/test">
            <classpath>
                <path refid="classpath" />
            </classpath>
        </javac>
        <junit printsummary="yes" haltonfailure="no"> <!-- Do not halt on test failure-->
            <classpath>
                <path refid="classpath" />
                <pathelement location="${build.dir}/test" />
            </classpath>
            <formatter type="plain" usefile="false" />
            <batchtest fork="yes" todir="${build.dir}/test">
                <fileset dir="${src.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

	<!--Javadoc Target-->
	<target name="javadoc" depends="compile">
		<mkdir dir="${javadoc.dir}"/>
		<!--Exclude Tests-->
		<fileset dir="${src.dir}" id="src.files">
			<exclude name="**/*Test.java"/>
			<exclude name="**/logback.xml"/>
		</fileset>

		<javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}" classpathref="classpath">
			<fileset refid="src.files"/>
		</javadoc>
	</target>

    <!--Add a clean target-->
	<target name="clean" description="clean up">
		<delete dir="${build.dir}" />
		<delete dir="${dist.lib.dir}" />
		<delete file="${dist.dir}/${projectName}.jar" />
		<delete dir="${javadoc.dir}"/>
	</target>


    
	<!-- Default, run this -->
	<target name="main" depends="resolve, clean, compile, test, jar, javadoc" >
		<!--Print how to run the application -->
		<echo message="-------------------App Running Instruction------------------" />
		<pathconvert property="jar.path" pathsep="${path.separator}">
			<path>
				<pathelement location="${dist.dir}/${projectName}.jar" />
			</path>
		</pathconvert>
		<echo message="To run the application, use the following command:" />
		<echo message="java -jar ${jar.path}" />
		<echo message="" />
		<!--Print Admin account credentials -->
		<echo message="--------------Admin Account Credentials--------------" />
		<echo message="Username: admin" />
		<echo message="Password: admin" />
		<echo message="" />
	</target>

</project>
